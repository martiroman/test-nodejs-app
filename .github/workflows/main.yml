name: Build, Push Docker Image, Deploy and Stress Test

on:
  push:
    branches:
      - main

permissions:
  contents: write
  
jobs:
  # ==============================
  # 1. Build y Push de Docker
  # ==============================
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      build-version: ${{ steps.version.outputs.build_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: src/package-lock.json

      - name: Install dependencies
        working-directory: ./src
        run: npm install

      - name: Build project
        working-directory: ./src
        run: npm run build --if-present

      - name: Generate build version
        id: version
        run: |
          COMMIT_COUNT=$(git rev-list --count HEAD)
          BUILD_VERSION=1.0.$COMMIT_COUNT
          echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_ENV
          echo "::set-output name=build_version::$BUILD_VERSION"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mi-app-node:${{ env.BUILD_VERSION }}

  # ==============================
  # 2️. Stress Test Pre-Deploy
  # ==============================
  stress-test-pre:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run stress test (Pre-Deploy)
        run: |
          # Ejemplo usando k6
          docker run --rm -i loadimpact/k6 run - < ./stress-tests/test-script.js \
            --env TARGET_URL=https://qa.mi-app.example.com
            
  # ==============================
  # 3️. Deploy via ArgoCD
  # ==============================
  deploy-argocd:
    runs-on: ubuntu-latest
    needs: [build-and-push, stress-test-pre]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update deploy.yaml
        run: |
          DEPLOY_FILE=conf-k8s/deploy.yaml
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/mi-app-node:latest
          BUILD_VERSION=${{ env.BUILD_VERSION }}

          sed -i "s|image: .*|image: $IMAGE_NAME|g" $DEPLOY_FILE
          sed -i "s|buildVersion: .*|buildVersion: $BUILD_VERSION|g" $DEPLOY_FILE

      - name: Commit updated deploy.yaml
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add conf-k8s/deploy.yaml
          git commit -m "Update buildVersion to $BUILD_VERSION and Docker image" || echo "No changes to commit"
          git push origin HEAD:main

      - name: Trigger ArgoCD Sync
        run: |
          argocd app sync mi-app-qa --auth-token ${{ secrets.ARGOCD_TOKEN }} --server ${{ secrets.ARGOCD_SERVER }}

  # ==============================
  # 4️. Stress Test Post-Deploy
  # ==============================
  stress-test-post:
    runs-on: ubuntu-latest
    needs: deploy-argocd
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run stress test (Post-Deploy)
        run: |
          docker run --rm -i loadimpact/k6 run - < ./stress-tests/test-script.js \
            --env TARGET_URL=https://qa.mi-app.example.com
